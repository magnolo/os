(function(e) {
	var n = "4.0b",
		k = "~~",
		a = "~~",
		g = "[\\s!;,%\"'\\(\\)\\{\\}]",
		c = "http://www.openscience.or.at/assets/lib/thesaurus4/server.php",
		l = ["SCRIPT", "BASE", "LINK", "META", "STYLE", "TITLE", "APPLET", "OBJECT"],
		j = "",
		d = '<div class="thesaurus"><div class="thesaurus-canvas"><div class="thesaurus-header"><a class="term"></a></div><div class="thesaurus-body">wird geladen...</div></div></div>',
		i = 100,
		m = 5000,
		b = null,
		f = {
			termsDef: {},
			targetId: 0
		},
		h = {
			_urlEncode: function(o) {
				return encodeURIComponent(o.replace(/ /g, "+"))
			},
			request: function(p, o, q) {
				e.getScript(c + "?action=" + p + (typeof o.term !== "undefined" ? "&term=" + h._urlEncode(o.term) : "") + (typeof o.stats !== "undefined" ? "&stats=" + h._urlEncode(o.stats) : "") + (typeof o.caseSensitive !== "undefined" ? "&caseSensitive=" + (o.caseSensitive * 1) : ""), q)
			}
		};
	Stats = function() {
		var p = {},
			o = function() {
				if (Object.keys(p).length) {
					h.request("onview", {
						stats: JSON.stringify(p)
					}, function() {
						p = {}
					})
				}
			};
		return {
			establishServerPushConnection: function() {
				window.setInterval(o, m);
				e(window).unload(o)
			},
			incrementTermViews: function(q) {
				q = (q + "").toLowerCase();
				p[q] = typeof p[q] === "undefined" ? 1 : p[q] + 1
			},
			incrementTermClicks: function(q) {
				h.request("onclick", {
					term: q
				})
			}
		}
	}, Tooltip = function(w) {
		var q = b.getSettings(),
			u = b.getStatsInstance(),
			p = w,
			t = null,
			o = null,
			v = 0,
			r = function(B) {
				var A = B.offset().top - 5 - t.height(),
					z = B.offset().left + B.width() / 2,
					y = t.find(" > .thesaurus-canvas");
				y.removeClass("upwards").removeClass("downwards").removeClass("leftwards").removeClass("rightwards");
				if (A < e(window).scrollTop()) {
					A = B.offset().top + B.height() + 5;
					y.addClass("downwards")
				} else {
					y.addClass("upwards")
				} if (z > e(window).width() - t.width()) {
					z = B.offset().left - t.width() + B.width() / 2;
					y.addClass("leftwards")
				} else {
					y.addClass("rightwards")
				}
				t.css("top", Math.floor(A)).css("left", Math.floor(z))
			},
			s = function(y, z) {
				if (typeof f.termsDef[y] !== "undefined") {
					z(f.termsDef[y]);
					return
				}
				h.request("termDef", {
					term: y,
					caseSensitive: q.caseSensitive
				}, function() {
					f.termsDef[y] = e.callbackData.payload;
					z(f.termsDef[y])
				})
			},
			x = function(y) {
				if (q.effect) {
					t.addClass("thesaurus-" + q.effect + "-" + y)
				}
			};
		return {
			syncUI: function(y) {
				y.find("dfn.thesaurus").unbind().bind("mouseenter", this, function(z) {
					z.data.show(e(this))
				}).bind("mouseleave", this, function(z) {
					z.data.hide()
				})
			},
			syncOverlayUI: function(y) {
				t.unbind().bind("mouseenter", this, function(z) {
					z.data.cancelHiding()
				}).bind("mouseleave", this, function(z) {
					z.data.hide()
				}).bind("click", this, function() {
					u.incrementTermClicks(y)
				})
			},
			show: function(A) {
				var y = A.text(),
					B = A.data("id"),
					z = this;
				u.incrementTermViews(y);
				if (B && v === B && t.hasClass("thesaurus-visible")) {
					this.cancelHiding();
					return
				}
				if (typeof B === "undefined") {
					A.data("id", v = ++f.targetId)
				}
				e(t).remove();
				t = e(d).appendTo("body");
				t.find("a.term").text(y);
				//if (e.browser.msie && Math.floor(e.browser.version) < 10) {
				//	t.find(" > .thesaurus-canvas").removeClass("thesaurus-canvas")
				//}
				t.addClass("thesaurus-visible");
				x("start");
				this.syncOverlayUI(y);
				r(A);
				s(y, function(C) {
					b.run(t.find("div.thesaurus-body").html(C), z);
					r(A)
				});
				x("end")
			},
			cancelHiding: function() {
				window.clearTimeout(o);
				if (typeof p !== "undefined") {
					p.cancelHiding()
				}
			},
			hide: function() {
				if (typeof p !== "undefined") {
					p.hide()
				}
				window.clearTimeout(o);
				o = window.setTimeout(function() {
					t.removeClass("thesaurus-visible").remove()
				}, i)
			}
		}
	}, Thesaurus = function(q) {
		var s = e.extend({
				caseSensitive: false,
				effect: null,
				pushStats: false
			}, q),
			p = {},
			r = new Stats(),
			o = function(w, x) {
				var v = s.caseSensitive ? "g" : "gi";
				if (x == w) {
					return k + w + a
				}
				var y = new RegExp("^(" + x + ")(" + g + ")", v);
				w = w.replace(y, k + "$1" + a + "$2");
				y = new RegExp("(" + g + ")(" + x + ")$", v);
				w = w.replace(y, "$1" + k + "$2" + a);
				y = new RegExp("(" + g + ")(" + x + ")(" + g + ")", v);
				w = w.replace(y, "$1" + k + "$2" + a + "$3");
				return w
			},
			t = function(v) {
				v.contents().filter(function() {
					if (this.nodeType === 1) {
						t(e(this))
					}
					return this.nodeType === 3 && e.trim(e(this).text()).length && e.inArray(this.tagName, l) === -1
				}).each(function() {
					var w = this;
					e.each(p, function(y, x) {
						w.nodeValue = o(w.nodeValue, x)
					})
				})
			},
			u = function(v) {
				v.find("script").detach();
				v.html(function(y, w) {
					var x = new RegExp(k + "(.*?)" + k, "g");
					return w.replace(x, '<dfn class="thesaurus">$1</dfn>')
				})
			};
		return {
			init: function(v) {
				if (s.pushStats) {
					r.establishServerPushConnection()
				}
				this.renderUI();
				this.loadTerms(v);
				return this
			},
			run: function(v, w) {
				t(v);
				u(v);
				var x = new Tooltip(w);
				x.syncUI(v)
			},
			loadTerms: function(w) {
				var v = this;
				h.request("termList", {}, function() {
					p = e.callbackData.payload;
					w.call(v)
				})
			},
			renderUI: function() {
				e("body").append('<style type="text/css">' + j + "</style>")
			},
			getSettings: function() {
				return s
			},
			getStatsInstance: function() {
				return r
			}
		}
	};
	e.fn.Thesaurus = function(p) {
		var o = e(this);
		if (b === null) {
			b = new Thesaurus(p);
			b.init(function() {
				b.run(o)
			})
		} else {
			b.run(o)
		}
	}
}(jQuery));